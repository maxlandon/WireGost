package module

// ExploitDriver - Drives the exploitation process from start to finish for a given
// exploit module instance. It's responsible for payload selection, configuration
// and generation, initializes handlers and finally runs the exploit, with all the
// associated setup steps (logging, security checks, etc...).
//
// There is one driver per exploit module loaded, per user. The exploit driver requests
// modules from the module.Manager, for populating its "template" and runs all appropriate
// components, checks compatibility between exploits, targets and payloads, etc...
//
// To some extent, all module types should have an underlying driver, for a better and
// more controlled exploitation process.
type ExploitDriver struct {
	// Includes an exploit
	Exploit *Exploit

	// Includes a payload (or a reference to the exploit's payload)

	// Some options, like backgrounding, logging, handlers settings, etc...
	// User requesting it, for checking permissions, etc...
}

// Instantiate the driver with some core information.

// Input validation methods (exploit compatibility, payload platform, options, security checks, etc)

// Target management & cycling method

// Run exploit methods Run() and RunAsJob(), which call on the remote Stack module peer to execute.
