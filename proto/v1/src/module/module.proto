// Wiregost - Golang Exploitation Framework
// Copyright Â© 2020 Para
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package module;

option go_package = "modulepb";       // Include the package ghost/core at compile time.

import "module/option.proto";
import "client/connection.proto";

// Modules do not need DB storage = no tags

// Module Types
enum Type {
        PAYLOAD = 0;
        EXPLOIT = 1;
        POST = 2;
}

// Info - This structure is shared by all modules, independently of their type.
message Info {
        // Base information
        string Name = 1;                // Module Name
        Type Type = 2;                  // Type of module
        string Path = 3;                // Path to module in modules directory
        string Description = 4;         // A description for this module
        string Notes = 5;               // Additional notes
        message Reference {             // A CVE,EDB, CWE, etc. reference identifier.
                repeated string ID = 1;
        }
        repeated Reference References = 6;  // Any reference useful to the user
        repeated string Authors = 7;        // Module authors
        repeated string Credits = 8;        // Other credits
        repeated string Targets = 9;        // A list of operating systems on which the module can be run
        string Arch = 10;                   // Supported architecture
        string Language = 11;               // Implementation language of the module
        bool Priviledged = 12;              // Does the module requires administrator privileges to be run ?
}

// Module - A module object, with properties and options
message Module {
        Info Info = 1;                          // Module metadata information
        map <string, Command> Commands = 14;    // The module can run different actions, with different commands
        map<string, Option> Options = 13;       // All options for this module. Send a list with them, for retrieving order.
}

// Command - A module may expose various subcommands, for triggering different functions.
message Command {
        string Name = 1;            // Command name
        string Description = 2;     // Description
        bool HasPayload = 3;        // Some commands trigger exploits, themselves requiring to action payloads. 
}

// RunRequest - Run the one of the functions of the module
message RunRequest {
        uint64 RequestID = 1;       // Uniquely identify the request, so that any further module output is redirected to the good console
        uint32 WorkspaceID = 2;
        string Path = 3;            // Module Path
        Command Command = 4;        // The precise action to trigger
        string Options = 5;         // Any option or argument need, such as profile name

        client.Client Client = 6;   // User authentication, needed to dispatch
}

message Run {
        bool Success = 1;
        string Result = 2;
        string Err = 3;
        Module Updated = 5;         // used when parsing profiles
}

// InfoRequest - Request the module's metadata information only
message InfoRequest {
        string Path = 3;            // Module Path

        client.Client Client = 6;   // User authentication, needed to dispatch
}

// EditRequest - Edit one of the module files 
message EditRequest {
        string Path = 2; 

        client.Client Client = 6;   // User authentication, needed to dispatch
}

message Edit {
        string Err = 2;
}
