// Wiregost - Golang Exploitation Framework
// Copyright Â© 2020 Para
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package module;

option go_package = "modulepb";

import "module/module.proto";
import "module/option.proto";
import "client/connection.proto";

// Module - A little RPC service providing methods for module objects, with which
// they can track and synchronise state between their stack version and the server's.
// All other elements that the modules will need, per type, will be registered by them.
//
// Here, the client is the Wiregost's server Module Manager, and the RPC server is the stack binary
// with all up-to-date compiled modules.
// Most of the time, these functions are somewhow "forwarded" by the Wiregost Module Manager:
// it will return a version of the module for console users, but it will also use it to update
// a user's stack, as well as to populate a Module Driver (Exploit, Payload, etc.) with a new
// instance of the module. This instance is used for various things, but it will not be the one
// triggering the actual Run(cmd string, args []string) method of a module.
service Stack {

        rpc UseModule(UseRequest) returns (Use);
        rpc RunModule(RunRequest) returns (Run);
        rpc GetInfo(InfoRequest) returns (Info);
        rpc GetOptions(OptionsRequest) returns (Options);
        rpc SetOption(SetOptionRequest) returns (Option);
}

// UseRequest - Load a module onto the stack
message UseRequest {
        string Path = 1;

        client.Client Client = 6;   // User authentication, needed to dispatch
}

message Use {
        Module Loaded = 1;
        string Err = 2;
}

// PopRequest - Pop one or more modules from the user stack
message PopRequest {
        repeated string Path = 3;
        bool All = 4;                   // Pop all modules from stack

        client.Client Client = 6;   // User authentication, needed to dispatch
}

message Pop {
        Module Next = 1;                // Sends next module on stack: empty if none left
        string Err = 2;
}

// PushRequest - Push one or more modules onto the user stack
message PushRequest {
        repeated string Path = 3;

        client.Client Client = 6;   // User authentication, needed to dispatch
}

message Push {
        string Err = 1;
}

// ClearRequest - Clears all modules from the user's stack
message ClearRequest {

        client.Client Client = 6;   // User authentication, needed to dispatch
}

message Clear {
        string Err = 1;
}

// ReloadRequest - Recompile and reload the module stack.
message ReloadRequest {

        client.Client Client = 6;   // User authentication, needed to dispatch
}

message Reload {
        string Err = 1;
}
