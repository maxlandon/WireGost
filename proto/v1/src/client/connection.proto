// Wiregost - Golang Exploitation Framework
// Copyright Â© 2020 Para
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package client;

option go_package = "clientpb";

import "db/user.proto";
import "db/workspace.proto";
import "client/console_config.proto";
import "context/metadata.proto";

// ConnectionRPC - All requests to connect a client and send information to it.
service ConnectionRPC {
        // Authentication Request/Response.
        rpc Authenticate(AuthenticationRequest) returns (Authentication);
        // Configuration & Info Request/Response.
        rpc GetConnectionInfo(ConnectionInfoRequest) returns (ConnectionInfo);
        // Version information.
        rpc GetVersion(Empty) returns (Version);
        // GetHistory - Queries the history for a client/user.
        rpc GetHistory(HistoryRequest) returns (History);
        // AddToHistory - Recurrent history building.
        rpc AddToHistory(AddCmdHistoryRequest) returns (AddCmdHistory);
}


// Client - A client console connected to the Wiregost server
message Client {
        string ID = 1;
        db.User User = 3;
}

// AuthenticationRequest - Send user name & password
message AuthenticationRequest {
        string Username = 1;
        string Password = 2;

        context.RPCContext MD = 10;
}

// Confirm/deny authentication, and send client ID & token
message Authentication {
        bool Success = 1;
        Client Client = 2;
}


// ConnectionInfoRequest - Empty message to ask for further information
message ConnectionInfoRequest {
        context.RPCContext MD = 10;
}

// ConnectionDetails - Further information needed by the client
message ConnectionInfo{
        client.ConsoleConfig ConsoleConfig = 1;
        // DB
        string DBHost = 10;
        int32 DBPort = 11;
        string PublicKeyDB = 2;
        string PrivateKeyDB = 3;
        // Useful
        int32 Messages = 4;
        int32 ActiveUsers = 5;
        int32 Ghosts = 6;
        int32 Jobs = 7;
        db.Workspace Workspace = 8;
}

// Version - Version information
message Version {
       string ServerMajor = 1;
       string ServerMinor = 2;
       string ServerPatch = 6;
       string ServerCommitTag = 3;
       string ClientMajor = 4;
       string ClientMinor = 5;
       string ClientPatch = 7;
}

// AddCmdHistoryRequest - Consoles send their commands each time
message AddCmdHistoryRequest {
        string Line = 1;

        Client Client = 10;
}

message AddCmdHistory {
        bool Doublon = 1; // Do not increment index, item is doublon
}

// HistoryRequest - A console wants a command history.
message HistoryRequest {
        bool AllConsoles = 1; // One merged history for all user consoles
        int32 Index = 2;      // The maximum number of entries wished
        
        Client Client = 10;
}

// History - Command history content.
message History {
        string Line = 1;
        int32 HistLength = 2;
}
