// Wiregost - Golang Exploitation Framework
// Copyright Â© 2020 Para
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package transport;

option go_package = "transportpb";

// The ghost implant can change either the connection address and/or the transport protocol used.
// These are requests and responses to do so.

// Protocol - Protocol used for comms 
enum Protocol {             // Identify Protocol
        MTLS = 0;
        DNS = 1;
        HTTP = 2;
        QUIC = 3;
        KCP = 4;
        PIPE = 5;
}

// Type - // Do we start a listener on the implant, or do we reach back another address ?
enum Type {                 
        REVERSE = 0; // DIALER
        BIND = 1;    // LISTENER
}

enum StagingType {
        SINGLE = 0; // The connection does not serve any addition payload.
        STAGER = 1; // The connection will serve some payload.
}

// Transport - A transport is just a structure used by implants to receive/send/use transport configurations.
message Transport {
        int64 ID = 1;
        string LHost = 2;
        int32 LPort = 3;
        string RHost = 4;
        int32 RPort = 5;
        Protocol Protocol = 6;
        int32 WFSDelay = 7;      // Wait for session delay
        Type Type = 8;
        StagingType StagingType = 9;
        bool Default = 10;
        bool Multiplex = 11;
}


// ChangeTransportRequest - Request an implant to connect with new transport settings
// At the server, we should check the transport type, and if reverse, check a listener is running, otherwise
// return error and do not ask implant to change its transport.
message ChangeTransportRequest {
        uint32 GhostID = 1;

        uint32 TransportID = 2; 
        bool Force = 5;
}

message ChangeTransport {
        bool Success = 1;
        string Warning = 2;         // If force true, send a warning message (other routes passing through) 
        string Err = 3;             // If force false, send the warning as an error, and Success false
}


// ListTransportsRequest - List available transports for a ghost implant
message ListTransportsRequest {
        uint32 GhostID = 1;
}

message ListTransports {
        repeated Transport Transports = 1;
}


// Essentially, a transport request is either starting a reverse or a bind handler with different proto/address
message AddTransportRequest {
        uint32 GhostID = 1;

        Transport Transport = 2;
        // HTTP Http = 3;          // Either of these fields can be empty, except one.
        // DNS Dns = 4;            // They are used to share protocol-specific details
        // QUIC Quic = 5;
        // KCP Kcp = 6;
        // MTLS Mtls = 7;
        // NamedPipe Pipe = 8;
}

message AddTransport {
        bool Success = 1;
        string Err = 2;
}

// DeleteTransportRequest - Delete one or more transports from the implant transport list
message DeleteTransportRequest {
        uint32 GhostID = 1;

        int32 TransportID = 5;          // If TransportID != 0 delete based on ID
        string Protocol = 2;            // Else, kill all matches
        string LHost = 3;
        string LPort = 4;
}

message DeleteTransport {
        bool Success = 1;
        string Err = 2;
}
