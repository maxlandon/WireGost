# Paths to exclude when searching for Protobuf files.
# These can either be file or directory names.
# If there is a directory name, that directory and all sub-directories will be excluded.
#excludes:
#  - path/to/a
#  - path/to/b/file.proto

# Protoc directives.
protoc:
  # The Protobuf version to use from https://github.com/protocolbuffers/protobuf/releases.
  # By default use 3.8.0.
  # You probably want to set this to make your builds completely reproducible.
  version: 3.8.0

  # Additional paths to include with -I to protoc.
  # By default, the directory of the config file is included,
  # or the current directory if there is no config file.
  includes:
    # All 
    - .
    # Ghost
    # - ./ghost/
    # Server
    # - ./server/
    # Module
    # - ./module/


  # If not set, compile will fail if there are unused imports.
  # Setting this will ignore unused imports.
  #allow_unused_imports: true

# Create directives.
create:
  # List of mappings from relative directory to base package.
  # This affects how packages are generated with create.
  packages:
    # This means that a file created "foo.proto" in the current directory will have package "bar".
    # A file created "a/b/foo.proto" will have package "bar.a.b".
    # This means that a file created "idl/code.uber/a/b/c.proto" will have package "uber.a.b".
    # - directory: idl/code.uber
    #  name: uber

    # Ghost 
    - directory: ./ghost
      name: ghost
    - directory: ./ghost/transport
      name: ghost.transport

    # Server 
    - directory: ./server
      name: server 
    - directory: ./server/route
      name: server.route

    # Transport
    - directory: ./transport
      name: transport
    - directory: ./transport/route
      name: transport.route
    
    

# Lint directives.
lint:
  # The lint group to use.
  # Available groups: "uber1", "uber2", "google", "empty".
  # The default group is the "uber1" lint group for backwards compatibility reasons,
  # however we recommend using the "uber2" lint group.
  # The special group "empty" has no linters, allowing you to manually specify all
  # lint rules in lint.rules.add.
  # Run prototool lint --list-all-lint-groups to see all available lint groups.
  # Run prototool lint --list-lint-group GROUP to list the linters in the given lint group.
  group: uber2

  # Linter files to ignore.
  # These can either be file or directory names.
  # If there is a directory name, that directory and all sub-directories will be ignored.
#  ignores:
#    - id: RPC_NAMES_CAMEL_CASE
#      files:
#        - path/to/foo.proto
#        - path/to/bar.proto
#    - id: SYNTAX_PROTO3
#      files:
#        - path/to/dir

  # Linter rules.
  # Run prototool lint --list-all-linters to see all available linters.
  # Run prototool lint --list-linters to see the currently configured linters.
  rules:

    # The specific linters to add.
    add:

    # The specific linters to remove.
    remove:
     # Comments
      - COMMENTS_NO_INLINE
      - MESSAGES_HAVE_COMMENTS                                         
      - MESSAGES_HAVE_COMMENTS_EXCEPT_REQUEST_RESPONSE_TYPES           
      - MESSAGES_HAVE_SENTENCE_COMMENTS_EXCEPT_REQUEST_RESPONSE_TYPES  
      - MESSAGES_NOT_EMPTY_EXCEPT_REQUEST_RESPONSE_TYPES 
      - ENUMS_HAVE_COMMENTS                                            
      - ENUMS_HAVE_SENTENCE_COMMENTS                                   
      - ENUM_FIELDS_HAVE_COMMENTS                                      
      - ENUM_FIELDS_HAVE_SENTENCE_COMMENTS 
    # Language imports
      - FILE_OPTIONS_REQUIRE_CSHARP_NAMESPACE                          
      - FILE_OPTIONS_REQUIRE_JAVA_MULTIPLE_FILES                       
      - FILE_OPTIONS_REQUIRE_JAVA_OUTER_CLASSNAME                      
      - FILE_OPTIONS_REQUIRE_JAVA_PACKAGE                              
      - FILE_OPTIONS_REQUIRE_OBJC_CLASS_PREFIX                         
      - FILE_OPTIONS_REQUIRE_PHP_NAMESPACE                             
      - FILE_OPTIONS_UNSET_JAVA_MULTIPLE_FILES                         
      - FILE_OPTIONS_UNSET_JAVA_OUTER_CLASSNAME                        
    # Go specific
      - FILE_OPTIONS_EQUAL_GO_PACKAGE_PB_SUFFIX       # Not sure we need this
    # Syntax
      - MESSAGE_FIELD_NAMES_LOWER_SNAKE_CASE
      - ENUM_FIELD_PREFIXES
      - ENUM_ZERO_VALUES_INVALID
      - ENUM_FIELD_PREFIXES_EXCEPT_MESSAGE
      - ENUM_ZERO_VALUES_INVALID_EXCEPT_MESSAGE
      - ENUM_FIELD_NAMES_UPPERCASE                                     
      - ENUM_FIELD_NAMES_UPPER_SNAKE_CASE
    # RPC Services
      - SERVICE_NAMES_API_SUFFIX
      - SERVICE_NAMES_MATCH_FILE_NAME
      - REQUEST_RESPONSE_NAMES_MATCH_RPC
      - REQUEST_RESPONSE_TYPES_ONLY_IN_FILE
      - REQUEST_RESPONSE_TYPES_IN_SAME_FILE
    # Other
      - PACKAGE_MAJOR_BETA_VERSIONED 
      - FILE_NAMES_LOWER_SNAKE_CASE
      - WKT_TIMESTAMP_SUFFIX

  # The path to the file header or the file header content for all Protobuf files.
  # If either path or content is set and the FILE_HEADER linter is turned on,
  # files will be checked to begin with the given header, and format --fix
  # will place this header before the syntax declaration. Note that
  # format --fix will delete anything before the syntax declaration
  # if this is set.
  #
  # Set path to use a file's contents for the header. Path must be relative.
  # Set content to directly specify the header.
  # **Both path and content cannot be set at the same time. They are only done
  # so here for example purposes.**
  #
  # If is_commented is set, this file is assumed to already have comments
  # and will be added directly. If is_commented is not set, "// " will be
  # added before every line.
  file_header:
   path: file-header.txt

   # content: |
   #   // Wiregost - Golang Exploitation Framework
   #   // Copyright Â© 2020 Para
   #   //
   #   // This program is free software: you can redistribute it and/or modify
   #   // it under the terms of the GNU General Public License as published by
   #   // the Free Software Foundation, either version 3 of the License, or
   #   // (at your option) any later version.
   #   //
   #   // This program is distributed in the hope that it will be useful,
   #   // but WITHOUT ANY WARRANTY; without even the implied warranty of
   #   // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   #   // GNU General Public License for more details.
   #   //
   #   // You should have received a copy of the GNU General Public License
   #   // along with this program.  If not, see <http://www.gnu.org/licenses/>.
   
   # is_commented: true
   
  # Override the default java_package file option prefix of "com".
  # If this is set, this will affect lint, create, and format --fix to use.
  # this prefix instead of "com".
#  java_package_prefix: au.com

# Breaking change detector directives.
#break:
  # Include beta packages in breaking change detection.
  # Beta packages have the form "foo.bar.vMAJORbetaBETA" where MAJOR > 0 and BETA > 0.
  # By default, beta packages are ignored.
  #include_beta: true
  # Allow stable packages to depend on beta packages.
  # By default, the breaking change detector will error if a stable package
  # depends on a breaking package.
  # If include_beta is true, this is implicitly set.
  #allow_beta_deps: true

# Code generation directives.
generate:
  # Options that will apply to all plugins of type go and gogo.
  go_options:
    # The base import path. This should be the go path of the prototool.yaml file.
    # This is required if you have any go plugins.
    # Wiregost:
    # protoc-gen-go is automatically installed with prototool
    # when running 'make proto' from Wiregost' repository root
    import_path: .

    # Extra modifiers to include with Mfile=package.
    
    # Wiregost:
    # Because there is still no way for protoc to detect the Go Module setup
    # protoc produces Go files that use relative imports when the underlying
    # proto definitions are importing each other. This is not compatible for
    # our project, so the following modifiers tell protoc to replace the relative
    # imports strings (ex: import "../gen/go/db") with absolute paths.
    # We unfortunatly have to specify it for EACH Protobuf source file.
    extra_modifiers:
    # DB
      db/address.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/db
      db/credential.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/db
      db/host.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/db
      db/os.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/db
      db/os_families.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/db
      db/port.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/db
      db/service.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/db
      db/user.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/db
      db/workspace.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/db
    # Client
      client/console_config.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/client
      client/connection.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/client
    # Context 
      context/metadata.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/context
    # Module
      module/module.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/module
      module/option.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/module
      module/stack.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/module
      module/log.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/module
    # Scanner
      scanner/nmap.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/scanner
    # Ghost
      ghost/ghost.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/ghost 
      ghost/log.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/ghost 
      ghost/core/base.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/ghost/core
      ghost/core/capture.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/ghost/core
      ghost/core/execute.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/ghost/core
      ghost/core/filesystem.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/ghost/core
      ghost/core/ghost.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/ghost/core
      ghost/core/net.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/ghost/core
      ghost/core/priv.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/ghost/core
      ghost/core/proc.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/ghost/core
      ghost/core/shell.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/ghost/core
    # Server
      server/client.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/server
      server/certs.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/server
      server/event.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/server
      server/ghost_build.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/server
      server/job.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/server
      server/msf.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/server
      server/stager.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/server
      server/user.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/server
      server/website.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/server
      server/session.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/server
    # Transport
      transport/dns.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/transport
      transport/envelope.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/transport
      transport/handler.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/transport
      transport/http.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/transport
      transport/mtls.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/transport
      transport/named-pipe.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/transport
      transport/transport.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/transport
      # Transport/Route
      transport/route/h2.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/transport/route
      transport/route/node.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/transport/route
      transport/route/quic.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/transport/route
      transport/route/route.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/transport/route
      transport/route/shadow-socks.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/transport/route
      transport/route/socks5.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/transport/route
      transport/route/ssh.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/transport/route
      transport/route/udp.proto: github.com/maxlandon/wiregost/proto/v1/gen/go/transport/route

#      google/api/annotations.proto: google.golang.org/genproto/googleapis/api/annotations
#      google/api/http.proto: google.golang.org/genproto/googleapis/api/annotations

  # The list of plugins.
  plugins:
    # GRPC // Using github.com/grpc/grpc-go/cmd/protoc-gen-go-grpc
    - name: go-grpc
      type: go
      output: ../gen/go

      # The plugin name. This will go to protoc with --name_out, so it either needs
      # to be a built-in name (like java), or a plugin name with a binary
      # protoc-gen-name.
    - name: go

      # The type, if any. Valid types are go, gogo.
      # Use go if your plugin is a standard Golang plugin
      # that uses github.com/golang/protobuf imports, use gogo
      # if it uses github.com/gogo/protobuf imports. For protoc-gen-go
      # use go, For protoc-gen-gogo, protoc-gen-gogoslick, etc, use gogo.
      type: go

      # Extra flags to specify.
      # The only flag you will generally set is plugins=grpc for Golang.
      # The Mfile=package flags are automatically set.
      # ** Otherwise, generally do not set this unless you know what you are doing. **
      # flags: plugins=grpc,paths=source_relative
      # flags: plugins=grpc:../gen/go

      # The path to output generated files to.
      # If the directory does not exist, it will be created when running generation.
      # This needs to be a relative path.
      output: ../gen/go

      # Optional override for the plugin path. For example, if you set set path to
      # /usr/local/bin/gogo_plugin", prototool will add the
      # "--plugin=protoc-gen-gogo=/usr/local/bin/gogo_plugin" flag to protoc calls.
      # If set to "gogo_plugin", prototool will search your path for "gogo_plugin",.
      # and fail if "gogo_plugin" cannot be found.
      
      # Wiregost:
      # protoc-gen-go is automatically installed with prototool
      # when running 'make proto' from Wiregost' repository root
      # path: proto/bin/Linux/x86_64/bin/protoc-gen-go
      # path: ${GOBIN}
      # path: ${GOBIN}/bin/Linux/x86_64/bin/protoc-gen-go

    # Tag Injection
#    - name: yarpc-go
#      type: gogo
#      output: ../../.gen/proto/go

#    - name: grpc-gateway
#      type: go
#      output: ../../.gen/proto/go
   # - name: grpc
   #    flags: go-grpc_out=../gen/go
   #    type: go
   #    output: ../gen/go 

#    - name: java
#      output: ../../.gen/proto/java

      # Optional file suffix for plugins that output a single file as opposed
      # to writing a set of files to a directory. This is only valid in two
      # known cases:
      # - For the java plugin, set this to "jar" to produce jars
      #   https://developers.google.com/protocol-buffers/docs/reference/java-generated#invocation
      # - For the descriptor_set plugin, this is required as using descriptor_set
      #   requires a file to be given instead of a directory.
#      file_suffix: jar

      # descriptor_set is special, and uses the --descriptor_set_out flag on protoc.
      # file_suffix is required, and the options include_imports and include_source_info
      # can be optionally set to add the flags --include_imports and --include_source-info.
      # The include_imports and include_source_info options are not valid for any
      # other plugin name.
#    - name: descriptor_set
#      output: ../../.gen/proto/descriptor
#      file_suffix: bin
#      include_imports: true
#      include_source_info: true
