// Wiregost - Golang Exploitation Framework
// Copyright Â© 2020 Para
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package server;

option go_package = "serverpb";

import "client/console_config.proto";
import "client/connection.proto";

// EventType - Events can range from user connect/disconnect, job cancellation, to session registering.
enum EventType {
        JOB = 0;
        LISTENER = 1;
        MODULE = 2;
        STACK = 3;
        SESSION = 4;
        USER = 5;
        CANARY = 6;
        ROUTE = 7;
}

// Level - Some components in Wiregost will push to the event system through logger hooks,
// for more granular output of log information, especially for modules.
enum Level {
        TRACE = 0;
        DEBUG = 1;
        INFO = 2;
        WARNING = 3;
        ERROR = 4;
        SUCCESS = 5;
}

// Events - The Event system in Wiregost is built around a gRPC server, 
// to which potential event subscribers can connect and register some events.
// The subscriber is always the client here.
service Events {
        
        // EventsSubscribe - The client subscribes to some types of events.
        rpc EventsSubscribe(SubscribeRequest) returns (Subscribe);
        // EventsUnsubscribe - The client unsubscribes from some types of events.
        rpc EventsUnsubscribe(UnsubscribeRequest) returns (Unsubscribe);

        // Events - Receive events from the server.
        rpc Events(client.Client) returns (stream Event);

        // EventPush - A client pushes a new event to the server.
        rpc EventPush(Event) returns (client.Empty);
}

// Event - Any asynchronous event to be pushed to one or more consoles
message Event {
        EventType Type = 1; 
        Level Level = 2;
        // Job Job = 2;
        // Ghost Ghost = 3;
        client.Client Client = 4;

        string Message = 7;
        string Module = 8;
        string Err = 9;
}

// SubscribeRequest - A client subscribes to some types of events
message SubscribeRequest {
        
}

message Subscribe {
        
}

// UnsubscribeRequest - A client unsubscribes from some types of events
message UnsubscribeRequest {
        
}

message Unsubscribe {
        
}
