// Wiregost - Golang Exploitation Framework
// Copyright Â© 2020 Para
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package server;

option go_package = "serverpb";

import "db/user.proto";
import "ghost/ghost.proto";
import "transport/route/route.proto";
import "ghost/core/base.proto";

// Session - Similarly to Metasploit, a Session object is a general means of
// interacting with various post-exploitation payloads through a common interface
// that is not necessarily tied to a network connection.
//
// For instance, if an exploit spawns a command shell over the network, the read/write
// operations end up reading and writing to that shell. These raw functions will be
// progressively reimplemented by embedders when they need more elaborated logic.
message Session {
        string ID = 1;                       // Each session has a Universally Unique UID
        string Name = 2;                     // Return Name or UUID
        SessionType Type = 3;
        bool Interactive = 4;
        string TunnelLocal = 5;              // The local side of the tunnel
        string TunnelPeer = 6;               // The peer (remote) side of the tunnel
        int32 RHost = 7;                     // The IP address of this session
        int32 RPort = 8;                     // Port number 
        string Description = 9;              // Further description of the session type
        string LogFile = 10;                 // A primary log file used for basic session types.
        Status Status = 11;
        db.User Owner = 12;                  // User who owns this session (derived from exploit/transport) 
        ghost.Permissions Permissions = 13;  // Ownership permissions on the session 

        // Other fields that may be used by embedders
        string HostID = 14;                   // The associated host for this session
        uint32 WorkspaceID = 15;
        string ExploitID = 16;
        string PayloadID = 17;
        bool SkipRegistration = 18;

        // Routes are included in a base Session, even if list is empty.
        repeated transport.route.Route Routes = 22;
        // Route permissions

        ghost.core.Environment Environment = 23; // Environment variables for this session.
}

// SessionType - The type of session (default: "unknown")
enum SessionType {          
        UNKNOWN = 0;        // default value
        SHELL = 1;          // The session is able to run basic commands on a remote shell.
}                     

// Status - The current status of the session (very important later)
enum Status {               
        ALIVE = 0;      // Full interaction 
        DOWN = 1;           // Non-networked interaction
        LOST = 2;           // Unrecoverable
}
